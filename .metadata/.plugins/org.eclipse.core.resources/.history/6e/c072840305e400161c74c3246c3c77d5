package cop5556sp17;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;

public class Scanner {
	/**
	 * Kind enum
	 */

	public static enum Kind {
		IDENT(""), INT_LIT(""), KW_INTEGER("integer"), KW_BOOLEAN("boolean"), KW_IMAGE("image"), KW_URL("url"), KW_FILE(
				"file"), KW_FRAME("frame"), KW_WHILE("while"), KW_IF("if"), KW_TRUE("true"), KW_FALSE("false"), SEMI(
						";"), COMMA(","), LPAREN("("), RPAREN(")"), LBRACE("{"), RBRACE("}"), ARROW("->"), BARARROW(
								"|->"), OR("|"), AND("&"), EQUAL("=="), NOTEQUAL("!="), LT("<"), GT(">"), LE("<="), GE(
										">="), PLUS("+"), MINUS("-"), TIMES("*"), DIV("/"), MOD("%"), NOT("!"), ASSIGN(
												"<-"), OP_BLUR("blur"), OP_GRAY("gray"), OP_CONVOLVE(
														"convolve"), KW_SCREENHEIGHT("screenheight"), KW_SCREENWIDTH(
																"screenwidth"), OP_WIDTH("width"), OP_HEIGHT(
																		"height"), KW_XLOC("xloc"), KW_YLOC(
																				"yloc"), KW_HIDE("hide"), KW_SHOW(
																						"show"), KW_MOVE(
																								"move"), OP_SLEEP(
																										"sleep"), KW_SCALE(
																												"scale"), EOF(
																														"eof");

		Kind(String text) {
			this.text = text;
		}

		final String text;

		String getText() {
			return text;
		}
	}

	/**
	 * Thrown by Scanner when an illegal character is encountered
	 */
	@SuppressWarnings("serial")
	public static class IllegalCharException extends Exception {
		public IllegalCharException(String message) {
			super(message);
		}
	}

	/**
	 * Thrown by Scanner when an int literal is not a value that can be
	 * represented by an int.
	 */
	@SuppressWarnings("serial")
	public static class IllegalNumberException extends Exception {
		public IllegalNumberException(String message) {
			super(message);
		}
	}

	/**
	 * Holds the line and position in the line of a token.
	 */
	static class LinePos {
		public final int line;
		public final int posInLine;

		public LinePos(int line, int posInLine) {
			super();
			this.line = line;
			this.posInLine = posInLine;
		}

		@Override
		public String toString() {
			return "LinePos [line=" + line + ", posInLine=" + posInLine + "]";
		}
	}

	public class Token {
		public final Kind kind;
		public final int pos; // position in input array
		public final int length;

		// returns the text of this Token
		public String getText() {
			// TODO IMPLEMENT THIS
			String text = "";
			text = chars.substring(pos, pos + length);
			return text;
		}

		// returns a LinePos object representing the line and column of this
		// Token
		LinePos getLinePos() {
			// TODO IMPLEMENT THIS
			return null;
		}

		Token(Kind kind, int pos, int length) {
			this.kind = kind;
			this.pos = pos;
			this.length = length;
		}

		/**
		 * Precondition: kind = Kind.INT_LIT, the text can be represented with a
		 * Java int. Note that the validity of the input should have been
		 * checked when the Token was created. So the exception should never be
		 * thrown.
		 * 
		 * @return int value of this token, which should represent an INT_LIT
		 * @throws NumberFormatException
		 */
		public int intVal() throws NumberFormatException {
			// TODO IMPLEMENT THIS
			String intString = this.getText();
			return Integer.parseInt(intString);
			
			//return 0;
		}

	}

	Scanner(String chars) {
		this.chars = chars;
		tokens = new ArrayList<Token>();
		
		lineNumber = new int[chars.length()];
		lineNumberCount = 0;
		
		positionNumberCount = 0;
		positionNumber = new int[chars.length()];

		Arrays.fill(lineNumber, -1);
		Arrays.fill(positionNumber, -1);
		//////////////////////////////////////////////////
		//////////////////////////////////////////////////
		operatorSet = new HashSet<Character>();
		separatorSet = new HashSet<Character>();
		operatorSet.add('|');
		operatorSet.add('&');
		operatorSet.add('=');
		operatorSet.add('!');
		operatorSet.add('<');
		operatorSet.add('>');
		operatorSet.add('+');
		operatorSet.add('-');
		operatorSet.add('*');
		operatorSet.add('/');
		operatorSet.add('%');
		//////////////////////////////////////////////////
		//////////////////////////////////////////////////
		separatorSet.add(';');
		separatorSet.add(',');
		separatorSet.add('(');
		separatorSet.add(')');
		separatorSet.add('{');
		separatorSet.add('}');
		//////////////////////////////////////////////////
		//////////////////////////////////////////////////
		identSet = new HashSet<Character>();
		for (char chr = 'a'; chr <= 'z'; chr++) {
			identSet.add(chr);
		}
		for (char chr = 'A'; chr <= 'Z'; chr++) {
			identSet.add(chr);
		}
		identSet.add('$');
		identSet.add('_');
		//////////////////////////////////////////////////
		//////////////////////////////////////////////////
		intSet = new HashSet<Character>();
		for (char chr = '1'; chr <= '9'; chr++) {
			intSet.add(chr);
		}
		//////////////////////////////////////////////////
		//////////////////////////////////////////////////
		keywordMap = new HashMap<String, Kind>();
		keywordMap.put("integer", Kind.KW_INTEGER);
		keywordMap.put("boolean", Kind.KW_BOOLEAN);
		keywordMap.put("image", Kind.KW_IMAGE);
		keywordMap.put("url", Kind.KW_URL);
		keywordMap.put("file", Kind.KW_FILE);
		keywordMap.put("frame", Kind.KW_FRAME);
		keywordMap.put("while", Kind.KW_WHILE);
		keywordMap.put("if", Kind.KW_IF);
		keywordMap.put("sleep", Kind.OP_SLEEP);
		keywordMap.put("screenheight", Kind.KW_SCREENHEIGHT);
		keywordMap.put("screenwidth", Kind.KW_SCREENWIDTH);
		keywordMap.put("gray", Kind.OP_GRAY);
		keywordMap.put("convolve", Kind.OP_CONVOLVE);
		keywordMap.put("blur", Kind.OP_BLUR);
		keywordMap.put("scale", Kind.KW_SCALE);
		keywordMap.put("width", Kind.OP_WIDTH);
		keywordMap.put("height", Kind.OP_HEIGHT);
		keywordMap.put("xloc", Kind.KW_XLOC);
		keywordMap.put("yloc", Kind.KW_YLOC);
		keywordMap.put("hide", Kind.KW_HIDE);
		keywordMap.put("show", Kind.KW_SHOW);
		keywordMap.put("move", Kind.KW_MOVE);
		keywordMap.put("true", Kind.KW_TRUE);
		keywordMap.put("false", Kind.KW_FALSE);
		//////////////////////////////////////////////////
		//////////////////////////////////////////////////
	}

	HashSet<Character> operatorSet;
	HashSet<Character> separatorSet;
	HashSet<Character> identSet;
	HashSet<Character> intSet;
	HashMap<String, Kind> keywordMap;
	int lineNumber[];
	int lineNumberCount;
	int positionNumber[];
	int positionNumberCount;

	/**
	 * Initializes Scanner object by traversing chars and adding tokens to
	 * tokens list.
	 * 
	 * @return this scanner
	 * @throws IllegalCharException
	 * @throws IllegalNumberException
	 */
	public Scanner scan() throws IllegalCharException, IllegalNumberException {
		int pos = -1;
		int length = chars.length();

		while (pos < length-1) {
			pos++;
			//extract character
			char ch = chars.charAt(pos);
			/* ***************************************************************************************************
			 * 1. check if character is valid or not						
			 *    valid ones are \b \t \n \f \r \" \' \\ 						
			 *    
			 * */
			
			if (Character.isJavaIdentifierPart(ch) || Character.isJavaIdentifierStart(ch) || Character.isDigit(ch)
					|| Character.isWhitespace(ch) || operatorSet.contains(ch) || separatorSet.contains(ch)) {

			} else {
				throw new IllegalCharException(ch + " is not a valid character at postion " + pos);
			}

			// handle line number
			if (ch == '\n') {
				lineNumberCount++;
			}

			/* 2. check  if operator
			 * 
			 * */
			if (operatorSet.contains(ch)) {
				if (ch == '=') {
					pos++;
					if (pos < length) {
						ch = chars.charAt(pos);
						if (ch == '=') {
							tokens.add(new Token(Kind.EQUAL, pos - 1, 2));
							lineNumber[pos-1] = lineNumberCount;
							continue;

						} else {
							throw new IllegalCharException("= is not a valid character at position " + pos);
						}
					} else {
						throw new IllegalCharException("= is not a valid character at position " + pos);
					}
				}

				if (ch == '!') {
					pos++;
					if (pos < length) {
						ch = chars.charAt(pos);
						if (ch == '=') {
							tokens.add(new Token(Kind.NOTEQUAL, pos - 1, 2));
							lineNumber[pos-1] = lineNumberCount;
							continue;
						} else {
							tokens.add(new Token(Kind.NOT, pos - 1, 1));
							lineNumber[pos-1] = lineNumberCount;
							pos--;
							continue;
						}
					} else {
						tokens.add(new Token(Kind.NOT, pos - 1, 1));
						lineNumber[pos-1] = lineNumberCount;
						pos--;
						continue;
					}
				}

				if (ch == '<') {
					pos++;
					if (pos < length) {
						ch = chars.charAt(pos);
						if (ch == '=') {
							tokens.add(new Token(Kind.LE, pos - 1, 2));
							lineNumber[pos-1] = lineNumberCount;
							continue;
						} else if (ch == '-') {
							tokens.add(new Token(Kind.ASSIGN, pos - 1, 2));
							lineNumber[pos-1] = lineNumberCount;
							continue;
						} else {
							tokens.add(new Token(Kind.LT, pos - 1, 1));
							lineNumber[pos-1] = lineNumberCount;
							pos--;
							continue;
						}
					} else {
						tokens.add(new Token(Kind.LT, pos - 1, 1));
						lineNumber[pos-1] = lineNumberCount;
						pos--;
						continue;
					}
				}
				if (ch == '>') {
					pos++;
					if (pos < length) {
						ch = chars.charAt(pos);
						if (ch == '=') {
							tokens.add(new Token(Kind.GE, pos - 1, 2));
							lineNumber[pos-1] = lineNumberCount;
							continue;
						} else {
							tokens.add(new Token(Kind.GT, pos - 1, 1));
							lineNumber[pos-1] = lineNumberCount;
							pos--;
							continue;
						}
					} else {
						tokens.add(new Token(Kind.GT, pos - 1, 1));
						lineNumber[pos-1] = lineNumberCount;
						pos--;
						continue;
					}
				}

				if (ch == '-') {
					pos++;
					if (pos < length) {
						ch = chars.charAt(pos);
						if (ch == '>') {
							tokens.add(new Token(Kind.ARROW, pos - 1, 2));
							lineNumber[pos-1] = lineNumberCount;
							continue;
						} else {
							tokens.add(new Token(Kind.MINUS, pos - 1, 1));
							lineNumber[pos-1] = lineNumberCount;
							pos--;
							continue;
						}
					} else {
						tokens.add(new Token(Kind.MINUS, pos - 1, 1));
						lineNumber[pos-1] = lineNumberCount;
						pos--;
						continue;
					}
				}

				if (ch == '|') {
					if (pos + 2 < length) {
						if (chars.charAt(pos + 1) == '-' && chars.charAt(pos + 2) == '>') {
							tokens.add(new Token(Kind.BARARROW, pos, 3));
							lineNumber[pos] = lineNumberCount;
							pos = pos+2;
							continue;
						} else {
							tokens.add(new Token(Kind.OR, pos, 1));
							lineNumber[pos] = lineNumberCount;
							continue;
						}
					} else {
						tokens.add(new Token(Kind.OR, pos, 1));
						lineNumber[pos] = lineNumberCount;
						continue;
					}
				}

				if (ch == '+') {
					tokens.add(new Token(Kind.PLUS, pos, 1));
					lineNumber[pos] = lineNumberCount;
					continue;
				}
				if (ch == '-') {
					tokens.add(new Token(Kind.MINUS, pos, 1));
					lineNumber[pos] = lineNumberCount;
					continue;
				}
				if (ch == '*') {
					tokens.add(new Token(Kind.TIMES, pos, 1));
					lineNumber[pos] = lineNumberCount;
					continue;
				}

				/* ***************************************************************************************************
				 *  3. handle comments or / symbol
				 * 
				 * */
				if (ch == '/') {
					if (pos + 1 < length) {
						if ('*' == chars.charAt(pos + 1)) {// /* encountered
							pos = pos + 2;

							while (pos < length) { // look for */
								ch = chars.charAt(pos);
								if (ch == '*') {
									if (pos + 1 < length)
										if ('/' == chars.charAt(pos + 1)) {
											pos++;
											break;
										}
								}

								pos++;
							}
						} else {
							tokens.add(new Token(Kind.DIV, pos, 1));
							lineNumber[pos] = lineNumberCount;
							continue;
						}
					} else {
						tokens.add(new Token(Kind.DIV, pos, 1));
						lineNumber[pos] = lineNumberCount;
						continue;
					}
				}

				if (ch == '%') {
					tokens.add(new Token(Kind.MOD, pos, 1));
					lineNumber[pos] = lineNumberCount;
					continue;
				}
				
				if (ch == '&') {
					tokens.add(new Token(Kind.AND, pos, 1));
					lineNumber[pos] = lineNumberCount;
					continue;
				}
			}

			/* ***************************************************************************************************
			 *  4. handle seperator 
			 * 
			 * */
			
			if (separatorSet.contains(ch)) {
				if (ch == ',') {
					tokens.add(new Token(Kind.COMMA, pos, 1));
					lineNumber[pos] = lineNumberCount;
					continue;
				}
				if (ch == ';') {
					tokens.add(new Token(Kind.SEMI, pos, 1));
					lineNumber[pos] = lineNumberCount;
					continue;
				}
				if (ch == '(') {
					tokens.add(new Token(Kind.LPAREN, pos, 1));
					lineNumber[pos] = lineNumberCount;
					continue;
				}
				if (ch == ')') {
					tokens.add(new Token(Kind.RPAREN, pos, 1));
					lineNumber[pos] = lineNumberCount;
					continue;
				}
				if (ch == '{') {
					tokens.add(new Token(Kind.LBRACE, pos, 1));
					lineNumber[pos] = lineNumberCount;
					continue;
				}
				if (ch == '}') {
					tokens.add(new Token(Kind.RBRACE, pos, 1));
					lineNumber[pos] = lineNumberCount;
					continue;
				}
			}

			/* ***************************************************************************************************
			 *  5. handle integers
			 * 
			 * */
			
			//Zero
			if (ch == '0') {
				tokens.add(new Token(Kind.INT_LIT, pos, 1));
				lineNumber[pos] = lineNumberCount;
				continue;
			}

			if (intSet.contains(ch)) {
				int ptr = pos;
				while ((intSet.contains(ch) || ch == '0') && ptr < length) {
					ptr++;
					if (ptr < length)
						ch = chars.charAt(ptr);
				}
				
				/* ***************************************************************************************************
				 * 		handle if integer is out of index 
				 * */
				String sub = chars.substring(pos, ptr);
				try {
					Integer.parseInt(sub);
				} catch (Exception e) {
					throw new IllegalNumberException(sub + " is out of integer range");
				}

				tokens.add(new Token(Kind.INT_LIT, pos, ptr - pos));
				lineNumber[pos] = lineNumberCount;
				pos = ptr;
				pos--;
				continue;
			}

			/* ***************************************************************************************************
			 *  6. handle ident
			 * 
			 * */
			if (identSet.contains(ch)) { // ident start
				int ptr = pos;
				while ((identSet.contains(ch) || intSet.contains(ch) || ch == '0') && ptr < length) { // ident part
					ptr++;
					if (ptr < length)
						ch = chars.charAt(ptr);
				}

				String sub = chars.substring(pos, ptr);
				if (keywordMap.containsKey(sub)) {
					tokens.add(new Token(keywordMap.get(sub), pos, ptr - pos));
					lineNumber[pos] = lineNumberCount;
				} else {
					tokens.add(new Token(Kind.IDENT, pos, ptr - pos));
					lineNumber[pos] = lineNumberCount;
				}
				pos = ptr;
				pos--;
			}

			//lineNumber[pos] = lineNumberCount;
			//pos++;
		}

		tokens.add(new Token(Kind.EOF, pos, 0));// why is the length zero ??
		return this;
	}

	final ArrayList<Token> tokens;
	final String chars;
	int tokenNum;

	/*
	 * Return the next token in the token list and update the state so that the
	 * next call will return the Token..
	 */
	public Token nextToken() {
		if (tokenNum >= tokens.size())
			return null;
		return tokens.get(tokenNum++);
	}

	/*
	 * Return the next token in the token list without updating the state. (So
	 * the following call to next will return the same token.)
	 */
	public Token peek() {
		if (tokenNum >= tokens.size())
			return null;

		//return tokens.get(tokenNum+1); //correction
		return tokens.get(tokenNum);
	}

	/**
	 * Returns a LinePos object containing the line and position in line of the
	 * given token.
	 * 
	 * Line numbers start counting at 0
	 * 
	 * @param t
	 * @return
	 */
	public LinePos getLinePos(Token t) {
		// TODO IMPLEMENT THIS
		int line = lineNumber[t.pos];
		int posInLine = 0;

		for (int i = t.pos; i > 0; i--) {
			if (lineNumber[i] == lineNumber[i - 1] || lineNumber[i] == -1) {
				posInLine++;
			} else {
				break;
			}
		}

		return new LinePos(line, posInLine);
	}

}
